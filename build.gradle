plugins {
    id 'java'
    id 'org.springframework.boot' apply(false)
    id 'io.spring.dependency-management'
    id 'com.diffplug.spotless' apply(false)
    id 'org.asciidoctor.jvm.convert' apply(false)
}

apply from: 'gradle/lint.gradle'

allprojects {
    group = "${projectGroup}"
    version = "${applicationVersion}"

    repositories {
        mavenCentral()
    }
}


subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(javaVersion)
        }
    }
    configurations {
        asciidoctorExt
        mockitoAgent
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudDependenciesVersion}"
        }
    }

    dependencies {
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")

        developmentOnly('org.springframework.boot:spring-boot-docker-compose')

        testAnnotationProcessor("org.projectlombok:lombok")
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        mockitoAgent('org.mockito:mockito-core') {
            transitive = false
        }
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    bootJar.enabled = false
    jar.enabled = true

    test {
        useJUnitPlatform {
            excludeTags('develop', 'restdocs')
        }
        jvmArgs '-Xshare:off'
        jvmArgs "-javaagent:${configurations.mockitoAgent.singleFile}"
    }

    tasks.register('unitTest', Test) {
        group = 'verification'
        testClassesDirs = sourceSets.test.output.classesDirs // 명시적 설정
        classpath = sourceSets.test.runtimeClasspath         // 명시적 설정'
        useJUnitPlatform {
            excludeTags('develop', 'context', 'restdocs')
        }
    }

    tasks.register('contextTest', Test) {
        group = 'verification'
        testClassesDirs = sourceSets.test.output.classesDirs // 명시적 설정
        classpath = sourceSets.test.runtimeClasspath         // 명시적 설정'
        useJUnitPlatform {
            includeTags('context')
        }
    }

    tasks.register('restDocsTest', Test) {
        group = 'verification'
        testClassesDirs = sourceSets.test.output.classesDirs // 명시적 설정
        classpath = sourceSets.test.runtimeClasspath         // 명시적 설정'
        useJUnitPlatform {
            includeTags('restdocs')
        }
    }

    tasks.register('developTest', Test) {
        group = 'verification'
        testClassesDirs = sourceSets.test.output.classesDirs // 명시적 설정
        classpath = sourceSets.test.runtimeClasspath         // 명시적 설정'
        useJUnitPlatform {
            includeTags('develop')
        }
    }

}
