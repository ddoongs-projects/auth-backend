# CI 파이프라인 (테스트 전용)
name: CI

# 워크플로우 트리거 조건 정의
on:
  # main 브랜치로의 push 이벤트 시 실행
  push:
    branches: [ main ]
  # main 브랜치로의 Pull Request 이벤트 시 실행
  pull_request:
    branches: [ main ]

# Job 정의
jobs:
  # 빌드 및 테스트 Job
  test:
    # Ubuntu 최신 버전에서 실행
    runs-on: ubuntu-latest
    
    steps:
      # 소스코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # JDK 21 설정 (Liberica 배포판 사용)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'liberica'

      # Gradle 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      # Gradle 의존성 캐시 설정 (빌드 속도 향상)
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          # 캐시할 경로 지정
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          # 캐시 키 생성 (gradle 파일 내용이 변경되면 새로운 캐시 생성)
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          # 캐시 미스 시 사용할 대체 키
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradle 빌드 실행
      - name: Build with Gradle
        run: ./gradlew build

      # 테스트 실행
      - name: Run tests
        run: ./gradlew test

      # 테스트 결과를 아티팩트로 업로드 (실패 시에도 업로드)
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: build/test-results/test

      # 테스트 결과 리포트 (PR에 표시)
      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        if: github.event_name == 'pull_request' && always()
        with:
          name: JUnit Tests
          path: build/test-results/test/*.xml
          reporter: java-junit