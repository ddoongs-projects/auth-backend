# 애플리케이션 배포 워크플로우
name: App Deploy

# 워크플로우 트리거 조건 정의
on:
  # CI 워크플로우 완료 시 실행
  workflow_run:
    workflows: [ "CI" ]
    types:
      - completed
    branches: [ main ]
  # 수동 실행 가능
  workflow_dispatch:

# 환경 변수 정의
env:
  # Docker Hub 레지스트리 주소
  DOCKER_REGISTRY: docker.io
  # 애플리케이션 Docker 이미지 이름 (GitHub 리포지토리 이름 사용)
  DOCKER_IMAGE_NAME: duk9741/ddoongs-auth
  # GitOps 리포지토리 정보
  GITOPS_REPO: dukcode/macmini-gitops
  # GitOps 배포 설정 파일 경로
  GITOPS_PATH: ddoongs/auth

# Job 정의
jobs:
  # 애플리케이션 Docker 이미지 빌드 및 푸시 Job
  docker-build-push:
    runs-on: ubuntu-latest
    # CI 워크플로우가 성공한 경우에만 실행
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      # 소스코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # JDK 21 설정 (JAR 파일 빌드를 위해 필요)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'liberica'

      # Gradle 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      # Spring Boot JAR 파일 빌드
      - name: Build application JAR
        run: ./gradlew bootJar

      # Docker Buildx 설정 (멀티 플랫폼 빌드 지원)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지 메타데이터 추출 (태그 생성)
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          # 태그 규칙 정의
          tags: |
            # 브랜치 이름을 태그로 사용
            type=ref,event=branch
            # 브랜치명-커밋SHA 형식의 태그 (짧은 SHA 사용)
            type=sha,prefix={{branch}}-,format=short
            # main 브랜치일 경우 latest 태그 추가
            type=raw,value=latest,enable={{is_default_branch}}
      # QEMU 설정 (필수!)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Docker Buildx 설정 (필수!)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/app/Dockerfile
          # AMD64와 ARM64 플랫폼 모두 지원
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # GitHub Actions 캐시 사용
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # GitOps 리포지토리 업데이트 Job
  update-gitops:
    # docker-build-push Job이 성공한 후 실행
    needs: docker-build-push
    runs-on: ubuntu-latest
    
    steps:
      # GitOps 리포지토리 체크아웃
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITOPS_REPO }}
          # GitOps 리포지토리 접근을 위한 토큰
          token: ${{ secrets.GITOPS_TOKEN }}
          # 체크아웃 경로 지정
          path: gitops

      # deployment.yaml 파일에서 이미지 태그 업데이트
      - name: Update image tag
        run: |
          cd gitops
          # 새로운 이미지 태그 생성 (브랜치명-짧은SHA)
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          IMAGE_TAG="${{ github.ref_name }}-${SHORT_SHA}"
          # sed를 사용하여 이미지 태그 교체
          sed -i "s|image: .*|image: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}|g" ${{ env.GITOPS_PATH }}/app.yaml

      # 변경사항 커밋 및 푸시
      - name: Commit and push changes
        run: |
          cd gitops
          # Git 사용자 정보 설정
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          # 모든 변경사항 스테이징
          git add .
          # 커밋 메시지와 함께 커밋
          git commit -m "Update image tag to ${{ github.ref_name }}-${SHORT_SHA}"
          # 원격 리포지토리로 푸시
          git push